/* Generated By:JavaCC: Do not edit this line. Compiler.java */
    package com.cc.gracecompiler.parser;
    import java.io.*;
    import com.cc.gracecompiler.classes.*;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.LinkedList;
    import java.util.Stack;

    public class Compiler implements CompilerConstants {

        public static Stack<Escopo> pilhaDeEscopos = new Stack<Escopo>();

        public static void main(String args[]) throws ParseException{

            try {

                FileInputStream file = new FileInputStream(args[0]);
                Compiler analyzer = new Compiler(file);
                analyzer.programa();
                System.out.println("Compiler execution completed");

            }catch(Throwable e){
                System.out.println(e.getMessage()); //Mensagem de erro l√©xico (em ingles) mostrando linha e coluna
                System.out.println("Errors detected");
                e.printStackTrace();
            }
        }

/*       TOKEN: { <OPEN_STRING: "\"">{System.out.println("Open String: "+image);}: WORD }
<WORD> TOKEN: { <STRING_BODY: ("\\\\" | "\\\"" | ~["\"", "\\"])+>{System.out.println("String Body: "+image);} }
<WORD> TOKEN: { <CLOSE_STRING: "\"">{System.out.println("Close String: "+image);}: DEFAULT }*/

/*SPECIAL_TOKEN:{
<INVALIDO_LEXICO:(~[" ","\t","\n","\r","\f"])+>
{
    countLexError++;
    System.err.println("Linha " + input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+
    " Token invalido encontrado: " + image + " "+"TOTAL DE ERROS "+countLexError);
    System.out.println("Erro Lexico ------> "+image);
}
}*/


/////////////////////////////////////////////////////PROGRAMA
  final public void programa() throws ParseException {
    Escopo e = new Escopo(null);
    e.isGlobal = true;
    Compiler.pilhaDeEscopos.push(e);

    Identificavel sub = null;
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      decVar();
    }
    label_2:
    while (true) {
      if (jj_2_2(3)) {
        ;
      } else {
        break label_2;
      }
      decSub();
    }
    jj_consume_token(0);
        sub = e.tabela.get("main");
        if(sub == null || sub instanceof Variavel) {if (true) throw new RuntimeException("ERRO: Funcao main nao definida.");}

        //e.imprimeTabela();
        e = Compiler.pilhaDeEscopos.pop();
  }

/////////////////////////////////////////////////////DECLARA√á√ÉO DE VARI√?VEL
  final public void decVar() throws ParseException {
    Tipo td = null;
    List<Variavel> vars = new ArrayList<Variavel>();
    jj_consume_token(VAR);
    vars = listaSpecVars();
    jj_consume_token(COLON);
    td = tipo();
    jj_consume_token(SEMICOLON);
        for(Variavel var : vars){

            if(var.tipo != null){
                if(var.tipo != td) {if (true) throw new RuntimeException("ERRO: Tipos incompativeis na atribuicao. \u005cr\u005cnLine: " + var.token.beginLine);}

            } else var.tipo = td;

            Compiler.pilhaDeEscopos.peek().inserirSimbolo(var.token, var);
        }
  }

  final public List<Variavel> listaSpecVars() throws ParseException {
    List<Variavel> vars = new ArrayList<Variavel>();
    Variavel var = null;
    var = specVar();
                     vars.add(var);
    label_3:
    while (true) {
      if (jj_2_3(3)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMMA);
      var = specVar();
                                                               vars.add(var);
    }
        {if (true) return vars;}
    throw new Error("Missing return statement in function");
  }

  final public Tipo tipo() throws ParseException {
    if (jj_2_4(3)) {
      jj_consume_token(WORD);
             {if (true) return Tipo.WORD;}
    } else if (jj_2_5(3)) {
      jj_consume_token(INT);
             {if (true) return Tipo.INT;}
    } else if (jj_2_6(3)) {
      jj_consume_token(BOOL);
              {if (true) return Tipo.BOOL;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Tipo tipoRetSub() throws ParseException {
    if (jj_2_7(3)) {
      jj_consume_token(WORD);
             {if (true) return Tipo.WORD;}
    } else if (jj_2_8(3)) {
      jj_consume_token(INT);
             {if (true) return Tipo.INT;}
    } else if (jj_2_9(3)) {
      jj_consume_token(BOOL);
              {if (true) return Tipo.BOOL;}
    } else if (jj_2_10(3)) {
      jj_consume_token(VOID);
              {if (true) return Tipo.VOID;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

///////////////////////////////////////////////////////////// FATORA√á√ÉO A ESQUERDA
  final public Variavel specVar() throws ParseException {
    Variavel var = null;
    Tipo td = null;
    Token token = null;
    Boolean isarranjo = false;
    token = jj_consume_token(IDENTIFIER);
    if (jj_2_13(3)) {
      if (jj_2_11(3)) {
        var = specVarArranjo();
                                                      isarranjo = true;
      } else if (jj_2_12(3)) {
        var = specVarSimplesInit();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
        //System.out.println("TIPO AI" + td);

        if(var == null){
            var = new Variavel();
            var.tipo = null;
            var.arranjo = isarranjo;
            var.inicializada = isarranjo;
        }

        var.token = token;
        {if (true) return var;}
    throw new Error("Missing return statement in function");
  }

  final public Variavel specVarSimplesInit() throws ParseException {
    Expressao exp = null;
    Variavel v = new Variavel();
    jj_consume_token(ATTRIBUTION);
    exp = expressao();
        v.tipo = exp.tipo;
        v.inicializada = true;
        {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public Variavel specVarArranjo() throws ParseException {
    Variavel v = null;
    Tipo td = null;
    variavelArranjo();
    if (jj_2_14(3)) {
      v = specVarArranjoInit();
    } else {
      ;
    }
        {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public Variavel specVarArranjoInit() throws ParseException {
    Expressao exp = null;
    List<Expressao> expList = new ArrayList<Expressao>();
    Token t = null;
    Variavel v = new Variavel();
    t = jj_consume_token(ATTRIBUTION);
    jj_consume_token(LKEYS);
    exp = expressao();
                                                    expList.add(exp);
    label_4:
    while (true) {
      if (jj_2_15(3)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(COMMA);
      exp = expressao();
                                                                                                    expList.add(exp);
    }
    jj_consume_token(RKEYS);
        for(Expressao e : expList){
            if(e.tipo != exp.tipo) {if (true) throw new RuntimeException("ERRO: Tipos incompativeis na atribuicao. \u005cr\u005cnLine: " + t.beginLine);}
        }

        v.tipo = exp.tipo;
        v.inicializada = true;
        {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////DECLARA√á√ÉO DE SUBPROGRAMAS
  final public void decSub() throws ParseException {
    Escopo e = null;
    SubPrograma sub = new SubPrograma();
    Tipo tipo = null;
    List<Variavel> listaParametros = new ArrayList<Variavel>();
    jj_consume_token(DEF);
    sub.token = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPARENTHESIS);
    if (jj_2_16(3)) {
      listaParametros = listaParametros();
    } else {
      ;
    }
    jj_consume_token(RPARENTHESIS);
    if (jj_2_17(3)) {
      jj_consume_token(COLON);
      tipo = tipoRetSub();
    } else {
      ;
    }

    e = bloco(listaParametros, false, (tipo == null), (tipo!=null));
        sub.tipo = tipo;
        if(sub.tipo == null) sub.tipo = Tipo.VOID;
        //System.out.println("-------------------------->TIPO: " + sub.tipo);
        sub.listaParametros = listaParametros;
        //sub.escopo = e;

        Compiler.pilhaDeEscopos.peek().inserirSimbolo(sub.token, sub);
  }

/////////////////////////////////////////////////////////////LISTA DE PAR√ÇMETROS
  final public List<Variavel> listaParametros() throws ParseException {
    List<Variavel> paramList = new ArrayList<Variavel>();
    List<Variavel> auxList = null;
    auxList = specParams();
                               paramList.addAll(auxList);
    label_5:
    while (true) {
      if (jj_2_18(3)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(SEMICOLON);
      auxList = specParams();
                                                                                                  paramList.addAll(auxList);
    }
        {if (true) return paramList;}
    throw new Error("Missing return statement in function");
  }

  final public List<Variavel> specParams() throws ParseException {
    List<Variavel> paramList = new ArrayList<Variavel>();
    Variavel var = null;
    Tipo td;
    var = param();
                     paramList.add(var);
    label_6:
    while (true) {
      if (jj_2_19(3)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(COMMA);
      var = param();
                                                                  paramList.add(var);
    }
    jj_consume_token(COLON);
    td = tipo();
        for(Variavel param: paramList){
            param.tipo = td;
        }
        {if (true) return paramList;}
    throw new Error("Missing return statement in function");
  }

  final public Variavel param() throws ParseException {
    Variavel param = new Variavel();
    Boolean isArranjo = false;
    param.token = jj_consume_token(IDENTIFIER);
    if (jj_2_20(3)) {
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                                                         isArranjo = true;
    } else {
      ;
    }
        param.arranjo = isArranjo;
        {if (true) return param;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////COMANDOS SIMPLES E BLOCOS DE COMANDOS
  final public void comando(Boolean isLoopOrCond) throws ParseException {
    if (jj_2_21(3)) {
      cmdSimples();
    } else if (jj_2_22(3)) {
      bloco(new ArrayList<Variavel>(), isLoopOrCond, false, false);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void cmdSimples() throws ParseException {
    if (jj_2_30(3)) {
      if (jj_2_23(3)) {
        cmdAtrib();
      } else if (jj_2_24(3)) {
        cmdChamadaProc();
      } else if (jj_2_25(3)) {
        cmdStop();
      } else if (jj_2_26(3)) {
        cmdSkip();
      } else if (jj_2_27(3)) {
        cmdReturn();
      } else if (jj_2_28(3)) {
        cmdRead();
      } else if (jj_2_29(3)) {
        cmdWrite();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
    } else if (jj_2_31(3)) {
      cmdIf();
    } else if (jj_2_32(3)) {
      cmdWhile();
    } else if (jj_2_33(3)) {
      cmdFor();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Escopo bloco(List<Variavel> listaParametros, Boolean isLoopOrCond, Boolean isProcedure, Boolean isFunc) throws ParseException {
    Escopo e = new Escopo( Compiler.pilhaDeEscopos.peek() );
    e.isLoopOrCond = isLoopOrCond;
    e.isProcedure = isProcedure;
    e.isFunc = isFunc;

    // adicione a lista de parametros aa tabela do escopo
    for(Variavel v : listaParametros){
        v.inicializada = true;
        e.inserirSimbolo(v.token, v);
    }

    Compiler.pilhaDeEscopos.push(e);
    jj_consume_token(LKEYS);
    label_7:
    while (true) {
      if (jj_2_34(3)) {
        ;
      } else {
        break label_7;
      }
      decVar();
    }
    label_8:
    while (true) {
      if (jj_2_35(3)) {
        ;
      } else {
        break label_8;
      }
      decSub();
    }
    label_9:
    while (true) {
      if (jj_2_36(3)) {
        ;
      } else {
        break label_9;
      }
      comando(false);
    }
    jj_consume_token(RKEYS);
        if(e.isFunc == true && e.hasReturn == false) {if (true) throw new RuntimeException("ERRO: Comando RETURN nao encontrado em funcao. \u005cr\u005cnLine: ?");}
        Compiler.pilhaDeEscopos.pop();

        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////ATRIBUI√á√ÉO
  final public void cmdAtrib() throws ParseException {
    Expressao exp = null;
    Token t = null;
    t = jj_consume_token(IDENTIFIER);
    if (jj_2_37(3)) {
      variavelArranjo();
    } else {
      ;
    }
    if (jj_2_38(3)) {
      jj_consume_token(ATTRIBUTION);
    } else if (jj_2_39(3)) {
      jj_consume_token(PLUSEQUAL);
    } else if (jj_2_40(3)) {
      jj_consume_token(MINUSEQUAL);
    } else if (jj_2_41(3)) {
      jj_consume_token(ASTERISKEQUAL);
    } else if (jj_2_42(3)) {
      jj_consume_token(DIVISIONEQUAL);
    } else if (jj_2_43(3)) {
      jj_consume_token(PERCENTEQUAL);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    exp = expressao();
        if(exp.tipo == Tipo.WORD && t == null) {if (true) throw new RuntimeException("ERRO: Expressao incompativel com a atribuicao: " + t.beginLine);}

        CmdAtribuicao a = new CmdAtribuicao(Compiler.pilhaDeEscopos.peek().buscarSimbolo(t), exp);
        a.analiseSemantica(t);
  }

//Expressao atrib():
//{
//    Expressao exp = null;
//    Token t = null;
//}
//{
//    ((variavelArranjo())? (t = <ATTRIBUTION> | <PLUSEQUAL> | <MINUSEQUAL> | <ASTERISKEQUAL> | <DIVISIONEQUAL> | <PERCENTEQUAL>) exp = expressao())
//    {
//        if(exp.tipo == Tipo.WORD && t == null) throw new RuntimeException("ERRO: Expressao incompativel com a atribuicao: " + t.beginLine);
//        return exp;
//    }
//
//}
  final public void variavelArranjo() throws ParseException {
    Expressao exp = null;
    Token t = null;
    t = jj_consume_token(LBRACKET);
    exp = expressao();
    jj_consume_token(RBRACKET);
        if(exp.tipo != Tipo.INT) {if (true) throw new RuntimeException("ERRO: Argumento incorreto para arranjo. \u005cr\u005cnLine: " + t.beginLine);}
  }

/////////////////////////////////////////////////////////////CONDICIONAL IF
  final public void cmdIf() throws ParseException {
    Expressao exp = null;
    Token t = null;
    jj_consume_token(IF);
    t = jj_consume_token(LPARENTHESIS);
    exp = expressao();
    jj_consume_token(RPARENTHESIS);
    comando(true);
    if (jj_2_44(3)) {
      jj_consume_token(ELSE);
      comando(true);
    } else {
      ;
    }
        CmdIf iff = new CmdIf(exp);
        iff.analiseSemantica(t);
  }

/////////////////////////////////////////////////////////////COMANDO WHILE
  final public void cmdWhile() throws ParseException {
    Expressao exp = null;
    Token t = null;
    jj_consume_token(WHILE);
    t = jj_consume_token(LPARENTHESIS);
    exp = expressao();
    jj_consume_token(RPARENTHESIS);
    comando(true);
        CmdWhile whilee = new CmdWhile(exp);
        whilee.analiseSemantica(t);
  }

/////////////////////////////////////////////////////////////LA√áO FOR
  final public void cmdFor() throws ParseException {
    Expressao exp = null;
    Token t = null;
    jj_consume_token(FOR);
    t = jj_consume_token(LPARENTHESIS);
    cmdAtrib();
    jj_consume_token(SEMICOLON);
    exp = expressao();
    jj_consume_token(SEMICOLON);
    cmdAtrib();
    jj_consume_token(RPARENTHESIS);
    comando(true);
        CmdFor forr = new CmdFor(exp);
        forr.analiseSemantica(t);
  }

/////////////////////////////////////////////////////////////INTERRUP√á√ÉO DE LA√áO
  final public void cmdStop() throws ParseException {
    Escopo e = Compiler.pilhaDeEscopos.peek();
    Token t = null;
    t = jj_consume_token(STOP);
        if(e.isLoopOrCond == false) {if (true) throw new RuntimeException("ERRO: Comando STOP fora de la\u00c3\u00a7o ou condicao. \u005cr\u005cnLine: " + t.beginLine);}
  }

/////////////////////////////////////////////////////////////SALTO DE ITERA√á√ÉO DE LA√áO
  final public void cmdSkip() throws ParseException {
    Escopo e = Compiler.pilhaDeEscopos.peek();
    Token t = null;
    t = jj_consume_token(CONTINUE);
        if(e.isLoopOrCond == false) {if (true) throw new RuntimeException("ERRO: Comando SKIP fora de la\u00c3\u00a7o ou condicao. \u005cr\u005cnLine: " + t.beginLine);}
  }

/////////////////////////////////////////////////////////////RETORNO DE SUBPROGRAMA
  final public void cmdReturn() throws ParseException {
    Escopo e = Compiler.pilhaDeEscopos.peek();
    Token t = null;
    Expressao exp = null;
    t = jj_consume_token(RETURN);
    if (jj_2_45(3)) {
      exp = expressao();
    } else {
      ;
    }
        if(e.isGlobal == true) {if (true) throw new RuntimeException("ERRO: Comando RETURN em escopo global. \u005cr\u005cnLine: " + t.beginLine);}
        if(e.isProcedure == true && exp != null) {if (true) throw new RuntimeException("ERRO: Retornando valor diferente de VOID em procedimento. \u005cr\u005cnLine: " + t.beginLine);}

        Compiler.pilhaDeEscopos.peek().hasReturn = true;
  }

/////////////////////////////////////////////////////////////CHAMADA DE PROCEDIMENTO
  final public Token cmdChamadaProc() throws ParseException {
    Expressao exp = null;
    List<Expressao> expList = new ArrayList<Expressao>();
    Token t = null;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPARENTHESIS);
    if (jj_2_47(3)) {
      exp = expressao();
                                                             expList.add(exp);
      label_10:
      while (true) {
        if (jj_2_46(3)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(COMMA);
        exp = expressao();
                                                                                                             expList.add(exp);
      }
    } else {
      ;
    }
    jj_consume_token(RPARENTHESIS);
        CmdChamadaProc cp = new CmdChamadaProc(Compiler.pilhaDeEscopos.peek().buscarSimbolo(t), expList);
        cp.analiseSemantica(t);

        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////ENTRADA READ
  final public void cmdRead() throws ParseException {
    Identificavel id = null;
    Token token = null;
    jj_consume_token(READ);
    token = jj_consume_token(IDENTIFIER);
    if (jj_2_48(3)) {
      variavelArranjo();
    } else {
      ;
    }
        id = Compiler.pilhaDeEscopos.peek().buscarSimbolo(token);

        if(id==null) {if (true) throw new RuntimeException("ERRO: Identificavel " + token.image + " nao instanciado. \u005cr\u005cnLine: " + token.beginLine);}
        if(id instanceof SubPrograma) {if (true) throw new RuntimeException("ERRO: Identificavel " + token.image + " nao e variavel. \u005cr\u005cnLine: " + token.beginLine);}

        ((Variavel) id).inicializada = true;
  }

/////////////////////////////////////////////////////////////SAIDA WRITE
  final public void cmdWrite() throws ParseException {
    jj_consume_token(WRITE);
    expressao();
    label_11:
    while (true) {
      if (jj_2_49(3)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(COMMA);
      expressao();
    }
  }

//////////////////////////////////////////////////////////// EXPRESS√?O
  final public Expressao operadorTern() throws ParseException {
    Expressao exp = null;
    exp = expressao();
    if (jj_2_50(3)) {
      jj_consume_token(QUESTION);
      exp = expressao();
      jj_consume_token(COLON);
      exp = expressao();
    } else {
      ;
    }
        {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expressao expressao() throws ParseException {
    Expressao exp = null;
    exp = LogicalOR();
        {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expressao LogicalOR() throws ParseException {
    Expressao exp = null;
    Token op = null;
    List<Expressao> expList = new ArrayList<Expressao>();
    List<Operador> opList = new ArrayList<Operador>();
    exp = LogicalAND();
                           expList.add(exp);
    label_12:
    while (true) {
      if (jj_2_51(3)) {
        ;
      } else {
        break label_12;
      }
      op = jj_consume_token(OR);
                                                            opList.add(Operador.getOp(op.kind));
      exp = LogicalAND();
                                                                                                                         expList.add(exp);
    }
        Expressao retExp = new Expressao(opList, expList);

        retExp.analiseSemantica(op);
        {if (true) return retExp;}
    throw new Error("Missing return statement in function");
  }

  final public Expressao LogicalAND() throws ParseException {
    Expressao exp = null;
    Token op = null;
    List<Expressao> expList = new ArrayList<Expressao>();
    List<Operador> opList = new ArrayList<Operador>();
    exp = EqualityExpression();
                                   expList.add(exp);
    label_13:
    while (true) {
      if (jj_2_52(3)) {
        ;
      } else {
        break label_13;
      }
      op = jj_consume_token(AND);
                                                                     opList.add(Operador.getOp(op.kind));
      exp = EqualityExpression();
                                                                                                                                          expList.add(exp);
    }
        Expressao retExp = new Expressao(opList, expList);

        retExp.analiseSemantica(op);
        {if (true) return retExp;}
    throw new Error("Missing return statement in function");
  }

  final public Expressao EqualityExpression() throws ParseException {
    Expressao exp = null;
    Token op = null;
    List<Expressao> expList = new ArrayList<Expressao>();
    List<Operador> opList = new ArrayList<Operador>();
    exp = RelativeExpression();
                                   {expList.add(exp);}
    label_14:
    while (true) {
      if (jj_2_53(3)) {
        ;
      } else {
        break label_14;
      }
      if (jj_2_54(3)) {
        op = jj_consume_token(EQUALS);
      } else if (jj_2_55(3)) {
        op = jj_consume_token(DIFFERENT);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                              opList.add(Operador.getOp(op.kind));
      exp = RelativeExpression();
                                                                                                                                                                   expList.add(exp);
    }
        Expressao retExp = new Expressao(opList, expList);

        retExp.analiseSemantica(op);
        {if (true) return retExp;}
    throw new Error("Missing return statement in function");
  }

  final public Expressao RelativeExpression() throws ParseException {
    Expressao exp = null;
    Token op = null;
    List<Expressao> expList = new ArrayList<Expressao>();
    List<Operador> opList = new ArrayList<Operador>();
    exp = AdditiveExpression();
                                   expList.add(exp);
    label_15:
    while (true) {
      if (jj_2_56(3)) {
        ;
      } else {
        break label_15;
      }
      if (jj_2_57(3)) {
        op = jj_consume_token(MINUSEQUAL);
      } else if (jj_2_58(3)) {
        op = jj_consume_token(SMALLER);
      } else if (jj_2_59(3)) {
        op = jj_consume_token(BIGGEREQUAL);
      } else if (jj_2_60(3)) {
        op = jj_consume_token(BIGGER);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                    opList.add(Operador.getOp(op.kind));
      exp = AdditiveExpression();
                                                                                                                                                                                                         expList.add(exp);
    }
        Expressao retExp = new Expressao(opList, expList);

        retExp.analiseSemantica(op);
        {if (true) return retExp;}
    throw new Error("Missing return statement in function");
  }

  final public Expressao AdditiveExpression() throws ParseException {
    Expressao exp = null;
    Token op = null;
    List<Expressao> expList = new ArrayList<Expressao>();
    List<Operador> opList = new ArrayList<Operador>();
    exp = MultiplicativeExpression();
                                         expList.add(exp);
    label_16:
    while (true) {
      if (jj_2_61(3)) {
        ;
      } else {
        break label_16;
      }
      if (jj_2_62(3)) {
        op = jj_consume_token(PLUS);
      } else if (jj_2_63(3)) {
        op = jj_consume_token(MINUS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                             opList.add(Operador.getOp(op.kind));
      exp = MultiplicativeExpression();
                                                                                                                                                                        expList.add(exp);
    }
        Expressao retExp = new Expressao(opList, expList);

        retExp.analiseSemantica(op);
        {if (true) return retExp;}
    throw new Error("Missing return statement in function");
  }

  final public Expressao MultiplicativeExpression() throws ParseException {
    Expressao exp = null;
    Token op = null;
    List<Expressao> expList = new ArrayList<Expressao>();
    List<Operador> opList = new ArrayList<Operador>();
    exp = UnaryExpression();
                                expList.add(exp);
    label_17:
    while (true) {
      if (jj_2_64(3)) {
        ;
      } else {
        break label_17;
      }
      if (jj_2_65(3)) {
        op = jj_consume_token(TIMES);
      } else if (jj_2_66(3)) {
        op = jj_consume_token(DIVISION);
      } else if (jj_2_67(3)) {
        op = jj_consume_token(PERCENT);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                       opList.add(Operador.getOp(op.kind));
      exp = UnaryExpression();
                                                                                                                                                                          expList.add(exp);
    }
        Expressao retExp = new Expressao(opList, expList);

        retExp.analiseSemantica(op);
        {if (true) return retExp;}
    throw new Error("Missing return statement in function");
  }

  final public Expressao UnaryExpression() throws ParseException {
    Expressao exp = new Expressao();
    Token tokenOp = null;
    Token elem = null;
    Operador op = null;
    if (jj_2_71(3)) {
      if (jj_2_68(3)) {
        tokenOp = jj_consume_token(NEGATION);
      } else if (jj_2_69(3)) {
        tokenOp = jj_consume_token(MINUS);
      } else if (jj_2_70(3)) {
        tokenOp = jj_consume_token(PLUS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    if (jj_2_72(3)) {
      jj_consume_token(LPARENTHESIS);
      exp = expressao();
      jj_consume_token(RPARENTHESIS);
    } else if (jj_2_73(3)) {
      exp = literal();
    } else if (jj_2_74(3)) {
      exp = identificavel();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        Expressao retExp = new Expressao();
        if(tokenOp != null) retExp.opList.add(Operador.getOp(tokenOp.kind));
        retExp.expList.add(exp);

        retExp.analiseSemantica(tokenOp);
        {if (true) return retExp;}
    throw new Error("Missing return statement in function");
  }

  final public Expressao identificavel() throws ParseException {
    Token token = null;
    Identificavel var = null;
    Expressao exp = null;
    if (jj_2_76(3)) {
      token = jj_consume_token(IDENTIFIER);
      if (jj_2_75(3)) {
        variavelArranjo();
      } else {
        ;
      }
    } else if (jj_2_77(3)) {
      token = cmdChamadaProc();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        var = Compiler.pilhaDeEscopos.peek().buscarSimbolo(token);

        if(var==null) {if (true) throw new RuntimeException("ERRO: Identificavel " + token.image + " nao instanciado. \u005cr\u005cnLine: " + token.beginLine);}
        if(var instanceof Variavel && ((Variavel)var).inicializada == false) {if (true) throw new RuntimeException("ERRO: Identificavel " + token.image + " nao inicializado. \u005cr\u005cnLine: " + token.beginLine);}
        if(var.getTipo() == Tipo.VOID) {if (true) throw new RuntimeException("ERRO: Subprograma " + token.image + " possui valor de retorno VOID. \u005cr\u005cnLine: " + token.beginLine);}

        Expressao retExp = new Expressao();
        retExp.tipo = var.getTipo();
        {if (true) return retExp;}
    throw new Error("Missing return statement in function");
  }

  final public Expressao literal() throws ParseException {
    Expressao exp = new Expressao();
    Token t = token;
    if (jj_2_78(3)) {
      t = jj_consume_token(NUMBER);
    } else if (jj_2_79(3)) {
      t = jj_consume_token(BOOLEAN);
    } else if (jj_2_80(3)) {
      t = jj_consume_token(WORD);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        exp.tipo = Tipo.getTipo(t.kind);
        //System.out.println("------------------>" + token.kind);
        {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_3_47() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_79() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(WRITE)) return true;
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(DIVISION)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(BIGGEREQUAL)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(READ)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  private boolean jj_3_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) return true;
    }
    }
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) return true;
    }
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(SMALLER)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_75()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(PERCENTEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(DIFFERENT)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(MINUSEQUAL)) return true;
    return false;
  }

  private boolean jj_3_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) return true;
    }
    }
    }
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(NEGATION)) return true;
    return false;
  }

  private boolean jj_3_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(DIVISIONEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) return true;
    }
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(STOP)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(ASTERISKEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(DEF)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(MINUSEQUAL)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(ATTRIBUTION)) return true;
    if (jj_scan_token(LKEYS)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(PLUSEQUAL)) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(ATTRIBUTION)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(ATTRIBUTION)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(QUESTION)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(LKEYS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RKEYS)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(PERCENT)) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(BIGGER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CompilerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[80];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Compiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compiler(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Compiler(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Compiler(CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 80; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
