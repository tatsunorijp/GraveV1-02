options{
STATIC = false;
LOOKAHEAD = 3;
FORCE_LA_CHECK = true;
}
PARSER_BEGIN(Compiler)

    package com.cc.gracecompiler.parser;
    import java.io.*;
    import com.cc.gracecompiler.classes.*;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.LinkedList;
    import java.util.Stack;

    public class Compiler{

        public static Stack<Escopo> pilhaDeEscopos = new Stack<Escopo>();

        public static void main(String args[]) throws ParseException{

            try {

                FileInputStream file = new FileInputStream(args[0]);
                Compiler analyzer = new Compiler(file);
                analyzer.programa();
                System.out.println("Compiler execution completed");

            }catch(Throwable e){
                System.out.println(e.getMessage()); //Mensagem de erro léxico (em ingles) mostrando linha e coluna
                System.out.println("Errors detected");
            }
        }
    }

PARSER_END(Compiler)

TOKEN_MGR_DECLS:{ //CONTADOR DE ERROS
        int countLexError = 0;
        public int foundLexError(){
            return countLexError;
        }
}


TOKEN:{ //PALAVRAS RESERVADAS

    <BOOL: "bool">//{System.out.println("Reserved word: "+image);}    //1
    |<DEF: "def">//{System.out.println("Reserved word: "+image);} //2
    |<ELSE: "else">//{System.out.println("Reserved word: "+image);}   //3
    |<FOR: "for">//{System.out.println("Reserved word: "+image);} //4
    |<IF: "if">//{System.out.println("Reserved word: "+image);}   //5
    |<INT: "int">//{System.out.println("Reserved word: "+image);} //6
    |<READ: "read">//{System.out.println("Reserved word: "+image);} //7
    |<RETURN: "return">//{System.out.println("Reserved word: "+image);} //8
    |<CONTINUE: "skip">//{System.out.println("Reserved word: "+image);} //9
    |<STOP: "stop">//{System.out.println("Reserved word: "+image);} //10
    |<STRING: "string">//{System.out.println("Reserved word: "+image);}   //11
    |<VAR: "var">//{System.out.println("Reserved word: "+image);} //12
    |<WHILE: "while">//{System.out.println("Reserved word: "+image);} //13
    |<WRITE: "write">//{System.out.println("Reserved word: "+image);} //14
    |<PNEUMOULTRAMICROSCOPICOSSILICOVULCANOCONIOTICO:"pneumoultramicroscopicossilicovulcanoconiotico">{System.out.println("Reserved word: "+image);}    //15
}

TOKEN:{ //SÍMBOLOS
    <LPARENTHESIS: "(">//{System.out.println("Symbol: "+image);}  //16
    |<RPARENTHESIS: ")">//{System.out.println("Symbol: "+image);} //17
    |<LBRACKET: "[">//{System.out.println("Symbol: "+image);} //18
    |<RBRACKET: "]">//{System.out.println("Symbol: "+image);} //19
    |<LKEYS: "{">//{System.out.println("Symbol: "+image);} //20
    |<RKEYS: "}">//{System.out.println("Symbol: "+image);} //21
    |<COMMA: ",">//{System.out.println("Symbol: "+image);} //22
    |<SEMICOLON: ";">//{System.out.println("Symbol: "+image);} //23
    |<QUOTE: "\"">//{System.out.println("Symbol: "+image);} //24
    |<PLUS: "+">//{System.out.println("Symbol: "+image);} //25
    |<MINUS: "-">//{System.out.println("Symbol: "+image);} //26
    |<TIMES: "*">//{System.out.println("Symbol: "+image);} //27
    |<DIVISION: "/">//{System.out.println("Symbol: "+image);} //28
    |<PERCENT: "%">//{System.out.println("Symbol: "+image);} //29
    |<EQUALS: "==">//{System.out.println("Symbol: "+image);} //30
    |<DIFERENT: "!=">//{System.out.println("Symbol: "+image);} //31
    |<BIGGEREQUAL: ">=">//{System.out.println("Symbol: "+image);} //32
    |<BIGGER: ">">//{System.out.println("Symbol: "+image);} //33
    |<SMALLEREQUAL: "<=">//{System.out.println("Symbol: "+image);} //34
    |<SMALLER: "<">//{System.out.println("Symbol: "+image);} //35
    |<OR: "||">//{System.out.println("Symbol: "+image);} //36
    |<AND: "&&">//{System.out.println("Symbol: "+image);} //37
    |<NEGATION: "!">//{System.out.println("Symbol: "+image);} //38
    |<PLUSEQUAL: "+=">//{System.out.println("Symbol: "+image);} //39
    |<MINUSEQUAL: "-=">//{System.out.println("Symbol: "+image);} //40
    |<ASTERISKEQUAL: "*=">//{System.out.println("Symbol: "+image);} //41
    |<DIVISIONEQUAL: "/=">//{System.out.println("Symbol: "+image);} //42
    |<PERCENTEQUAL: "%=">//{System.out.println("Symbol: "+image);} //43
    |<ATTRIBUTION: "=">//{System.out.println("Symbol: "+image);} //44
    |<QUESTION: "?">//{System.out.println("Symbol: "+image);} //45
    |<COLON: ":">//{System.out.println("Symbol: "+image);} //46
}

TOKEN:{ //PRIMITIVOS
    <NUMBER: ["0"-"9"] (["0"-"9"])* >//{System.out.println("Number: "+image);} //47
    |<BOOLEAN: "true" | "false"> //{System.out.println("Boolean: "+image);} //48
    |<WORD: <QUOTE> (~["\""])* <QUOTE>>//{System.out.println("Word: "+image);} //49
    |<IDENTIFIER: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "0"-"9", "_"])*>//{System.out.println("Identifier: "+image);} //50
}

SKIP:{ // TOKENS IGNORADOS
     " "
    | "\r"
    | "\t"
    | "\n"
    | <COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

/*       TOKEN: { <OPEN_STRING: "\"">{System.out.println("Open String: "+image);}: WORD }
<WORD> TOKEN: { <STRING_BODY: ("\\\\" | "\\\"" | ~["\"", "\\"])+>{System.out.println("String Body: "+image);} }
<WORD> TOKEN: { <CLOSE_STRING: "\"">{System.out.println("Close String: "+image);}: DEFAULT }*/

/*SPECIAL_TOKEN:{
<INVALIDO_LEXICO:(~[" ","\t","\n","\r","\f"])+>
{
    countLexError++;
    System.err.println("Linha " + input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+
    " Token invalido encontrado: " + image + " "+"TOTAL DE ERROS "+countLexError);
    System.out.println("Erro Lexico ------> "+image);
}
}*/


/////////////////////////////////////////////////////PROGRAMA
void programa():
{
    Escopo e = new Escopo(null);
    Compiler.pilhaDeEscopos.push(e);
}
{
    ((decVar())* (decSub())* <EOF>)
    {

        e = Compiler.pilhaDeEscopos.pop();
    }
}

/////////////////////////////////////////////////////DECLARAÇÃO DE VARIÁVEL
void decVar():
{
    Tipo td;
    List<Variavel> vars = new ArrayList<Variavel>();
}
{
    (<VAR> vars = listaSpecVars() <COLON> td = tipo() <SEMICOLON>)
    {
        for(Variavel var : vars){
            var.tipo = td;

            Compiler.pilhaDeEscopos.peek().inserirSimbolo(var.token, var);
        }
        Compiler.pilhaDeEscopos.peek().imprimeTabela();

    }
}

List<Variavel> listaSpecVars():
{
    List<Variavel> vars = new ArrayList<Variavel>();
    Variavel var = null;
}
{
    (var = specVar(){vars.add(var);} (<COMMA>  var = specVar(){vars.add(var);})*)
    {
        return vars;
    }
}

Tipo tipo():
{
}
{
    (<STRING>){return Tipo.STRING;}
    |(<INT>){return Tipo.INT;}
    |(<BOOL>){return Tipo.BOOL;}
}

///////////////////////////////////////////////////////////// FATORAÇÃO A ESQUERDA
Variavel specVar():
{
    Variavel var = new Variavel();
}
{
    (var.token = <IDENTIFIER>(specVarSimplesInit() | specVarArranjo())?){
        return var;
    }
}


void specVarSimplesInit():
{}
{
    <ATTRIBUTION> expressao()
}

void specVarArranjo():
{}{
    <LBRACKET> expressao() <RBRACKET> (specVarArranjoInit())?
}

void specVarArranjoInit():
{}
{
    <ATTRIBUTION> valorArranjo()
}

void valorArranjo():
{}
{
    valorArranjoNumber()|valorArranjoBoolean()|valorArranjoString()
}

void valorArranjoNumber():
{}
{
    <LKEYS> <NUMBER> (<COMMA> valorArranjoNumber())? <RKEYS> <SEMICOLON>
}

void valorArranjoBoolean():
{}
{
    <LKEYS> <BOOLEAN> (<COMMA> valorArranjoBoolean())? <RKEYS> <SEMICOLON>
}
void valorArranjoString():
{}
{
    <LKEYS> <WORD> (<COMMA> valorArranjoString())? <RKEYS> <SEMICOLON>
}


/////////////////////////////////////////////////////////////DECLARAÇÃO DE SUBPROGRAMAS
void decSub():
{}
{
    <DEF> <IDENTIFIER> <LPARENTHESIS> (listaParametros())? <RPARENTHESIS> (decFunc() | decProc())
    //decProc() | decFunc()
}

void decProc():
{}
{
    bloco()
    //<DEF> <IDENTIFIER> <LPARENTHESIS> (listaParametros()) <RPARENTHESIS> bloco()
}

void decFunc():
{}
{
    <COLON> tipo() bloco()
    //<DEF> <IDENTIFIER> <LPARENTHESIS> (listaParametros()) <RPARENTHESIS> tipo() bloco()
}

/////////////////////////////////////////////////////////////LISTA DE PARÂMETROS
void listaParametros():
{}
{
    specParams() (<SEMICOLON> specParams())?
}

void specParams():
{}
{
    param() (<COMMA> param())? <COLON> tipo()
}

void param():
{}
{
    //<IDENTIFIER> | <IDENTIFIER> <LBRACKET><RBRACKET>
    <IDENTIFIER> (<LBRACKET><RBRACKET>)?
}

/////////////////////////////////////////////////////////////COMANDOS SIMPLES E BLOCOS DE COMANDOS
void comando():
{}
{
    cmdSimples() | bloco()
}

void cmdSimples():
{}{
    cmdAtrib() <SEMICOLON> | cmdIf() | cmdWhile() | cmdFor() | cmdStop() | cmdSkip() |
    cmdReturn() | cmdChamadaProc() | cmdRead() | cmdWrite()
}

void bloco():
{

    Escopo e = new Escopo( Compiler.pilhaDeEscopos.peek() );
    Compiler.pilhaDeEscopos.push(e);

}
{
    (<LKEYS> (decVar())* (decSub())* (comando())* <RKEYS>)
    {
        Compiler.pilhaDeEscopos.pop();
    }
}

/////////////////////////////////////////////////////////////ATRIBUIÇÃO
void cmdAtrib():
{}
{
    atrib()
}

void atrib():
{

}
{
    variavel() ((<ATTRIBUTION> | <PLUSEQUAL> | <MINUSEQUAL> | <ASTERISKEQUAL> | <DIVISIONEQUAL> | <PERCENTEQUAL>) expressao() | <PLUS><PLUS> | <MINUS><MINUS> | <TIMES><TIMES> | <DIVISION><DIVISION>)

}

/////////////////////////////////////////////////////////////CONDICIONAL IF
void cmdIf():
{}
{
    <IF> <LPARENTHESIS> expressao() <RPARENTHESIS> comando() (<ELSE> comando())?
}

/////////////////////////////////////////////////////////////COMANDO WHILE
void cmdWhile():
{}
{
    <WHILE> <LPARENTHESIS> expressao() <RPARENTHESIS> comando()
}

/////////////////////////////////////////////////////////////LAÇO FOR
//fazer atribIni e atribPasso
void cmdFor():
{}
{
    <FOR> <LPARENTHESIS> atrib() <SEMICOLON> expressao() <SEMICOLON> atrib() <RPARENTHESIS> comando()
}

void atribIni():
{}
{
    <IDENTIFIER> <ATTRIBUTION> expressao()
}

void atribPasso():
{}
{
    <IDENTIFIER>

    (<ATTRIBUTION>   expressao()) |
    (<MINUSEQUAL>    expressao()) | <MINUS><MINUS> |
    (<PLUSEQUAL>     expressao()) | <PLUS><PLUS> |
    (<ASTERISKEQUAL> expressao()) | <TIMES><TIMES> |
    (<DIVISIONEQUAL> expressao()) | <DIVISION><DIVISION> |
    (<PERCENTEQUAL>  expressao())
}

/////////////////////////////////////////////////////////////INTERRUPÇÃO DE LAÇO
void cmdStop():
{}
{
    <STOP><SEMICOLON>
}

/////////////////////////////////////////////////////////////SALTO DE ITERAÇÃO DE LAÇO
void cmdSkip():
{}
{
    <CONTINUE><SEMICOLON>
}

/////////////////////////////////////////////////////////////RETORNO DE SUBPROGRAMA
void cmdReturn():
{}
{
    <RETURN> (expressao())? <SEMICOLON>
}

/////////////////////////////////////////////////////////////CHAMADA DE PROCEDIMENTO
void cmdChamadaProc():
{}
{
    <IDENTIFIER> <LPARENTHESIS> (expressao() (<COMMA> expressao())?)? <RPARENTHESIS> <SEMICOLON>
}

/////////////////////////////////////////////////////////////ENTRADA READ
void cmdRead():
{}
{
    <READ> variavel() <SEMICOLON>
}

/////////////////////////////////////////////////////////////SAIDA WRITE
void cmdWrite():
{}
{
    <WRITE> expressao() (<COMMA> expressao())* <SEMICOLON>
}

void variavel():
{}
{
    <IDENTIFIER> (variavelPartTwo())?
}

void variavelPartTwo():
{}
{
    <LBRACKET> expressao() <RBRACKET>
}


//////////////////////////////////////////////////////////// EXPRESSÁO

void operadorTern():
{}
{
    expressao() <QUESTION> expressao() <COLON> expressao()
}

void expressao() : {}
{
    LogicalOR() //| operadorTern()
}

void LogicalOR() : {}
{
    LogicalAND() ( <OR> LogicalOR())*
}

void LogicalAND() : {}
{
    RelativeExpression2() ( <AND> RelativeExpression2())*
}

void RelativeExpression2() : {}
{
    RelativeExpression() (( <EQUALS> | <DIFERENT> ) RelativeExpression())*
}

void RelativeExpression() : {}
{
    AdditiveExpression() ( ( <MINUSEQUAL> | <SMALLER> | <BIGGEREQUAL> | <BIGGER> ) AdditiveExpression())*
}

void AdditiveExpression() : {}
{
  MultiplicativeExpression() ( ( <PLUS> | <MINUS> ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() : {}
{
    UnaryExpression() ( ( <TIMES> | <DIVISION> | <PERCENT> ) UnaryExpression() )*
}

void UnaryExpression() : {}
{
  NumberOrBool() | SubCallOrIdentifier() | <LPARENTHESIS> expressao() <RPARENTHESIS>
}

void SubCallOrIdentifier():{}
{
    <IDENTIFIER> (<LBRACKET> expressao() <RBRACKET>)? | cmdChamadaProc() // APENAS CHAMADA DE FUNÇAO E CONSIDERADA EXPRESSAO
}

/*void Identifier() : {}
{
  <IDENTIFIER>
}*/

void NumberOrBool() : {}
{
    //[<MINUS> | <NEGATION>] (<NUMBER> | <BOOL>)
    Number() | Bool() | <WORD>
}

void Number():{}
{
    (<MINUS>)? <NUMBER>
}
void Bool():{}
{
    (<NEGATION>)? <BOOLEAN>
}
