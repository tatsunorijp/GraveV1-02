/* Generated By:JavaCC: Do not edit this line. CompilerConstants.java */
package com.cc.gracecompiler.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BOOL = 1;
  /** RegularExpression Id. */
  int DEF = 2;
  /** RegularExpression Id. */
  int ELSE = 3;
  /** RegularExpression Id. */
  int FOR = 4;
  /** RegularExpression Id. */
  int IF = 5;
  /** RegularExpression Id. */
  int INT = 6;
  /** RegularExpression Id. */
  int READ = 7;
  /** RegularExpression Id. */
  int RETURN = 8;
  /** RegularExpression Id. */
  int CONTINUE = 9;
  /** RegularExpression Id. */
  int STOP = 10;
  /** RegularExpression Id. */
  int STRING = 11;
  /** RegularExpression Id. */
  int VAR = 12;
  /** RegularExpression Id. */
  int WHILE = 13;
  /** RegularExpression Id. */
  int WRITE = 14;
  /** RegularExpression Id. */
  int VOID = 15;
  /** RegularExpression Id. */
  int LPARENTHESIS = 16;
  /** RegularExpression Id. */
  int RPARENTHESIS = 17;
  /** RegularExpression Id. */
  int LBRACKET = 18;
  /** RegularExpression Id. */
  int RBRACKET = 19;
  /** RegularExpression Id. */
  int LKEYS = 20;
  /** RegularExpression Id. */
  int RKEYS = 21;
  /** RegularExpression Id. */
  int COMMA = 22;
  /** RegularExpression Id. */
  int SEMICOLON = 23;
  /** RegularExpression Id. */
  int QUOTE = 24;
  /** RegularExpression Id. */
  int PLUS = 25;
  /** RegularExpression Id. */
  int MINUS = 26;
  /** RegularExpression Id. */
  int TIMES = 27;
  /** RegularExpression Id. */
  int DIVISION = 28;
  /** RegularExpression Id. */
  int PERCENT = 29;
  /** RegularExpression Id. */
  int EQUALS = 30;
  /** RegularExpression Id. */
  int DIFFERENT = 31;
  /** RegularExpression Id. */
  int BIGGEREQUAL = 32;
  /** RegularExpression Id. */
  int BIGGER = 33;
  /** RegularExpression Id. */
  int SMALLEREQUAL = 34;
  /** RegularExpression Id. */
  int SMALLER = 35;
  /** RegularExpression Id. */
  int OR = 36;
  /** RegularExpression Id. */
  int AND = 37;
  /** RegularExpression Id. */
  int NEGATION = 38;
  /** RegularExpression Id. */
  int PLUSEQUAL = 39;
  /** RegularExpression Id. */
  int MINUSEQUAL = 40;
  /** RegularExpression Id. */
  int ASTERISKEQUAL = 41;
  /** RegularExpression Id. */
  int DIVISIONEQUAL = 42;
  /** RegularExpression Id. */
  int PERCENTEQUAL = 43;
  /** RegularExpression Id. */
  int ATTRIBUTION = 44;
  /** RegularExpression Id. */
  int QUESTION = 45;
  /** RegularExpression Id. */
  int COLON = 46;
  /** RegularExpression Id. */
  int NUMBER = 47;
  /** RegularExpression Id. */
  int BOOLEAN = 48;
  /** RegularExpression Id. */
  int WORD = 49;
  /** RegularExpression Id. */
  int IDENTIFIER = 50;
  /** RegularExpression Id. */
  int COMMENT = 55;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"bool\"",
    "\"def\"",
    "\"else\"",
    "\"for\"",
    "\"if\"",
    "\"int\"",
    "\"read\"",
    "\"return\"",
    "\"skip\"",
    "\"stop\"",
    "\"string\"",
    "\"var\"",
    "\"while\"",
    "\"write\"",
    "\"void\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\"\\\"\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\">\"",
    "\"<=\"",
    "\"<\"",
    "\"||\"",
    "\"&&\"",
    "\"!\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"=\"",
    "\"?\"",
    "\":\"",
    "<NUMBER>",
    "<BOOLEAN>",
    "<WORD>",
    "<IDENTIFIER>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<COMMENT>",
  };

}
