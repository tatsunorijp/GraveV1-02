/* Generated By:JavaCC: Do not edit this line. CompilerTokenManager.java */
package com.cc.gracecompiler.parser;
import java.io.*;
import com.cc.gracecompiler.classes.*;
import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;
import java.util.Stack;

/** Token Manager. */
public class CompilerTokenManager implements CompilerConstants
{
                  //CONTADOR DE ERROS
        int countLexError = 0;
        public int foundLexError(){
            return countLexError;
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40010000000L) != 0L)
            return 14;
         if ((active0 & 0x1000000L) != 0L)
            return 20;
         if ((active0 & 0xffeeL) != 0L)
         {
            jjmatchedKind = 50;
            return 13;
         }
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 50;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0x20L) != 0L)
            return 13;
         if ((active0 & 0xffdeL) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
            return 13;
         }
         return -1;
      case 2:
         if ((active0 & 0x1054L) != 0L)
            return 13;
         if ((active0 & 0xef8aL) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
            return 13;
         }
         return -1;
      case 3:
         if ((active0 & 0xe900L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
            return 13;
         }
         if ((active0 & 0x68aL) != 0L)
            return 13;
         return -1;
      case 4:
         if ((active0 & 0x6000L) != 0L)
            return 13;
         if ((active0 & 0x8900L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
            return 13;
         }
         return -1;
      case 5:
         if ((active0 & 0x900L) != 0L)
            return 13;
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
            return 13;
         }
         return -1;
      case 6:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 6;
            return 13;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 7;
            return 13;
         }
         return -1;
      case 8:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 8;
            return 13;
         }
         return -1;
      case 9:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 9;
            return 13;
         }
         return -1;
      case 10:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 10;
            return 13;
         }
         return -1;
      case 11:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 11;
            return 13;
         }
         return -1;
      case 12:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 12;
            return 13;
         }
         return -1;
      case 13:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 13;
            return 13;
         }
         return -1;
      case 14:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 14;
            return 13;
         }
         return -1;
      case 15:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 15;
            return 13;
         }
         return -1;
      case 16:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 16;
            return 13;
         }
         return -1;
      case 17:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 17;
            return 13;
         }
         return -1;
      case 18:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 18;
            return 13;
         }
         return -1;
      case 19:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 19;
            return 13;
         }
         return -1;
      case 20:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 20;
            return 13;
         }
         return -1;
      case 21:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 21;
            return 13;
         }
         return -1;
      case 22:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 22;
            return 13;
         }
         return -1;
      case 23:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 23;
            return 13;
         }
         return -1;
      case 24:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 24;
            return 13;
         }
         return -1;
      case 25:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 25;
            return 13;
         }
         return -1;
      case 26:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 26;
            return 13;
         }
         return -1;
      case 27:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 27;
            return 13;
         }
         return -1;
      case 28:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 28;
            return 13;
         }
         return -1;
      case 29:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 29;
            return 13;
         }
         return -1;
      case 30:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 30;
            return 13;
         }
         return -1;
      case 31:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 31;
            return 13;
         }
         return -1;
      case 32:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 32;
            return 13;
         }
         return -1;
      case 33:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 33;
            return 13;
         }
         return -1;
      case 34:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 34;
            return 13;
         }
         return -1;
      case 35:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 35;
            return 13;
         }
         return -1;
      case 36:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 36;
            return 13;
         }
         return -1;
      case 37:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 37;
            return 13;
         }
         return -1;
      case 38:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 38;
            return 13;
         }
         return -1;
      case 39:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 39;
            return 13;
         }
         return -1;
      case 40:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 40;
            return 13;
         }
         return -1;
      case 41:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 41;
            return 13;
         }
         return -1;
      case 42:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 42;
            return 13;
         }
         return -1;
      case 43:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 43;
            return 13;
         }
         return -1;
      case 44:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 44;
            return 13;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 34:
         return jjStartNfaWithStates_0(0, 24, 20);
      case 37:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 40:
         return jjStopAtPos(0, 16);
      case 41:
         return jjStopAtPos(0, 17);
      case 42:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 43:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 44:
         return jjStopAtPos(0, 22);
      case 45:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 47:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 58:
         return jjStopAtPos(0, 46);
      case 59:
         return jjStopAtPos(0, 23);
      case 60:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 61:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 62:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 63:
         return jjStopAtPos(0, 45);
      case 91:
         return jjStopAtPos(0, 18);
      case 93:
         return jjStopAtPos(0, 19);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x60L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x180L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xe00L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x6000L);
      case 123:
         return jjStopAtPos(0, 20);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 125:
         return jjStopAtPos(0, 21);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 61:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x184L);
      case 102:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 5, 13);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8040L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x12L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00L);
      case 124:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 102:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 2, 13);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x6200L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x402L);
      case 114:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 4, 13);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 13);
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 13);
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 13);
         break;
      case 101:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 13);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 108:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 1, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 112:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 13);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 13);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8100L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 13);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 13);
         break;
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 103:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 13);
         break;
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 13);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa20_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa22_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa24_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa25_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa26_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa27_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa28_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa29_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa30_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa31_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0);
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0);
      return 31;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa32_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0);
}
private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0);
      return 32;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa33_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0);
}
private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0);
      return 33;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa34_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0);
}
private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0);
      return 34;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa35_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0);
}
private int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0);
      return 35;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa36_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0);
}
private int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0);
      return 36;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa37_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0);
}
private int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0);
      return 37;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa38_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(36, active0);
}
private int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(36, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, active0);
      return 38;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa39_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(37, active0);
}
private int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(37, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, active0);
      return 39;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa40_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(38, active0);
}
private int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(38, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, active0);
      return 40;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa41_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(39, active0);
}
private int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(39, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, active0);
      return 41;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa42_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(40, active0);
}
private int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(40, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, active0);
      return 42;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa43_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(41, active0);
}
private int jjMoveStringLiteralDfa43_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(41, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, active0);
      return 43;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa44_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(42, active0);
}
private int jjMoveStringLiteralDfa44_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(42, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, active0);
      return 44;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa45_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(43, active0);
}
private int jjMoveStringLiteralDfa45_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(43, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(44, active0);
      return 45;
   }
   switch(curChar)
   {
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(45, 15, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(44, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 20:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  else if (curChar == 34)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 7:
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(13);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(0);
                  break;
               case 9:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 34 && kind > 49)
                     kind = 49;
                  break;
               case 14:
                  if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 15:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if ((0x2400L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 17:
                  if (curChar == 10 && kind > 55)
                     kind = 55;
                  break;
               case 18:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 20:
               case 10:
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(13);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(13);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 1:
                  if (curChar == 101 && kind > 48)
                     kind = 48;
                  break;
               case 2:
                  if (curChar == 117)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if (curChar == 115)
                     jjCheckNAdd(1);
                  break;
               case 6:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(13);
                  break;
               case 15:
                  jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 20:
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   15, 16, 18, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\142\157\157\154", "\144\145\146", "\145\154\163\145", "\146\157\162", 
"\151\146", "\151\156\164", "\162\145\141\144", "\162\145\164\165\162\156", 
"\163\153\151\160", "\163\164\157\160", "\163\164\162\151\156\147", "\166\141\162", 
"\167\150\151\154\145", "\167\162\151\164\145", 
"\160\156\145\165\155\157\165\154\164\162\141\155\151\143\162\157\163\143\157\160\151\143\157\163\163\151\154\151\143\157\166\165\154\143\141\156\157\143\157\156\151\157\164\151\143\157", "\50", "\51", "\133", "\135", "\173", "\175", "\54", "\73", "\42", "\53", 
"\55", "\52", "\57", "\45", "\75\75", "\41\75", "\76\75", "\76", "\74\75", "\74", 
"\174\174", "\46\46", "\41", "\53\75", "\55\75", "\52\75", "\57\75", "\45\75", "\75", 
"\77", "\72", null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0xf8000000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[20];
private final int[] jjstateSet = new int[40];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public CompilerTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CompilerTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 20; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                                                                                                       System.out.println("Reserved word: "+image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
